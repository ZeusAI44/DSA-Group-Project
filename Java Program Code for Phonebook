import javax.swing.*;
import java.awt.*;
import java.util.*;
import java.util.List;

public class Main {
    private static final List<String> names = new ArrayList<>();
    private static final List<Integer> numbers = new ArrayList<>();

    private static final CardLayout cardLayout = new CardLayout();
    private static final JPanel mainPanel = new JPanel(cardLayout);

    private static final JTextField nameField = new JTextField(15);
    private static final JTextField numberField = new JTextField(15);
    private static final JTextArea displayArea = new JTextArea(10, 30);

    public static void main(String[] args) {
        // Create JFrame
        JFrame frame = new JFrame("Phonebook Application");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(400, 400);
        frame.setLayout(new BorderLayout());

        // Dark background and custom fonts/colors
        Color darkColor = new Color(45, 45, 45);
        Color lightColor = new Color(255, 255, 255);
        Font font = new Font("Arial", Font.PLAIN, 14);

        // Create Menu Panel
        JPanel menuPanel = new JPanel(new GridLayout(7, 1, 10, 10));
        menuPanel.setBackground(darkColor);

        JButton insertButton = createMenuButton("Insert Contact", darkColor, lightColor, font);
        JButton searchButton = createMenuButton("Search Contact", darkColor, lightColor, font);
        JButton displayButton = createMenuButton("Display All Contacts", darkColor, lightColor, font);
        JButton deleteButton = createMenuButton("Delete Contact", darkColor, lightColor, font);
        JButton updateButton = createMenuButton("Update Contact", darkColor, lightColor, font);
        JButton sortButton = createMenuButton("Sort Contacts", darkColor, lightColor, font);
        JButton exitButton = createMenuButton("Exit", darkColor, lightColor, font);

        // Add buttons to menu panel
        menuPanel.add(insertButton);
        menuPanel.add(searchButton);
        menuPanel.add(displayButton);
        menuPanel.add(deleteButton);
        menuPanel.add(updateButton);
        menuPanel.add(sortButton);
        menuPanel.add(exitButton);

        // Create Contact Panels
        JPanel insertPanel = createInsertPanel(darkColor, lightColor, font);
        JPanel searchPanel = createSearchPanel(darkColor, lightColor, font);
        JPanel displayPanel = createDisplayPanel(darkColor, lightColor, font);
        JPanel deletePanel = createDeletePanel(darkColor, lightColor, font);
        JPanel updatePanel = createUpdatePanel(darkColor, lightColor, font);
        JPanel sortPanel = createSortPanel(darkColor, lightColor, font);

        // Add panels to main panel with CardLayout
        mainPanel.add(menuPanel, "Menu");
        mainPanel.add(insertPanel, "Insert");
        mainPanel.add(searchPanel, "Search");
        mainPanel.add(displayPanel, "Display");
        mainPanel.add(deletePanel, "Delete");
        mainPanel.add(updatePanel, "Update");
        mainPanel.add(sortPanel, "Sort");

        // Action Listeners for menu buttons
        insertButton.addActionListener(e -> cardLayout.show(mainPanel, "Insert"));
        searchButton.addActionListener(e -> cardLayout.show(mainPanel, "Search"));
        displayButton.addActionListener(e -> {
            displayAllContacts();
            cardLayout.show(mainPanel, "Display");
        });
        deleteButton.addActionListener(e -> cardLayout.show(mainPanel, "Delete"));
        updateButton.addActionListener(e -> cardLayout.show(mainPanel, "Update"));
        sortButton.addActionListener(e -> cardLayout.show(mainPanel, "Sort"));
        exitButton.addActionListener(e -> System.exit(0));  // Exit action

        // Add components to frame
        frame.add(mainPanel, BorderLayout.CENTER);
        cardLayout.show(mainPanel, "Menu");
        frame.setVisible(true);
    }

    // Helper method to create menu buttons with consistent styling
    private static JButton createMenuButton(String text, Color bgColor, Color fgColor, Font font) {
        JButton button = new JButton(text);
        button.setBackground(bgColor);
        button.setForeground(fgColor);
        button.setFont(font);
        button.setFocusPainted(false);
        return button;
    }

    private static JPanel createInsertPanel(Color bgColor, Color fgColor, Font font) {
        JPanel panel = new JPanel();
        panel.setBackground(bgColor);
        panel.setLayout(new GridLayout(4, 1));

        JLabel nameLabel = new JLabel("Enter Name: ");
        nameLabel.setForeground(fgColor);
        nameLabel.setFont(font);

        JLabel numberLabel = new JLabel("Enter Number: ");
        numberLabel.setForeground(fgColor);
        numberLabel.setFont(font);

        JButton addButton = new JButton("Add Contact");
        addButton.setBackground(Color.RED);
        addButton.setForeground(fgColor);
        addButton.addActionListener(e -> {
            insertContact();
            returnToMenu(); // Go back to menu after inserting contact
        });

        panel.add(nameLabel);
        panel.add(nameField);
        panel.add(numberLabel);
        panel.add(numberField);
        panel.add(addButton);

        return panel;
    }

    private static JPanel createSearchPanel(Color bgColor, Color fgColor, Font font) {
        JPanel panel = new JPanel();
        panel.setBackground(bgColor);
        panel.setLayout(new GridLayout(3, 1));

        JLabel searchLabel = new JLabel("Enter Number to Search: ");
        searchLabel.setForeground(fgColor);
        searchLabel.setFont(font);

        JTextField searchField = new JTextField(15);
        JButton searchButton = new JButton("Search");

        searchButton.addActionListener(e -> {
            searchContact(Integer.parseInt(searchField.getText()));
            returnToMenu(); // Go back to menu after search
        });

        panel.add(searchLabel);
        panel.add(searchField);
        panel.add(searchButton);

        return panel;
    }

    private static JPanel createDisplayPanel(Color bgColor, Color fgColor, Font font) {
        JPanel panel = new JPanel();
        panel.setBackground(bgColor);

        displayArea.setEditable(false);
        displayArea.setForeground(fgColor);
        displayArea.setBackground(Color.RED);
        displayArea.setFont(font);

        JButton returnbutton = new JButton("return to menu");

        returnbutton.addActionListener(e -> {
            returnToMenu(); // Go back to menu after deleting contact
        });

        panel.add(new JScrollPane(displayArea));
        panel.add(returnbutton);
        return panel;

    }

    private static JPanel createDeletePanel(Color bgColor, Color fgColor, Font font) {
        JPanel panel = new JPanel();
        panel.setBackground(bgColor);
        panel.setLayout(new GridLayout(3, 1));

        JLabel deleteLabel = new JLabel("Enter Name or Number to Delete: ");
        deleteLabel.setForeground(fgColor);
        deleteLabel.setFont(font);

        JTextField deleteField = new JTextField(15);
        JButton deleteButton = new JButton("Delete");

        deleteButton.addActionListener(e -> {
            deleteContact(deleteField.getText());
            returnToMenu(); // Go back to menu after deleting contact
        });

        panel.add(deleteLabel);
        panel.add(deleteField);
        panel.add(deleteButton);

        return panel;
    }

    private static JPanel createUpdatePanel(Color bgColor, Color fgColor, Font font) {
        JPanel panel = new JPanel();
        panel.setBackground(bgColor);
        panel.setLayout(new GridLayout(5, 1));

        JLabel updateLabel = new JLabel("Enter Name or Number to Update: ");
        updateLabel.setForeground(fgColor);
        updateLabel.setFont(font);

        JTextField updateField = new JTextField(15);

        JLabel newNameLabel = new JLabel("Enter New Name: ");
        newNameLabel.setForeground(fgColor);
        newNameLabel.setFont(font);

        JTextField newNameField = new JTextField(15);

        JLabel newNumberLabel = new JLabel("Enter New Number: ");
        newNumberLabel.setForeground(fgColor);
        newNumberLabel.setFont(font);

        JTextField newNumberField = new JTextField(15);

        JButton updateButton = new JButton("Update");

        updateButton.addActionListener(e -> {
            updateContact(updateField.getText(), newNameField.getText(), Integer.parseInt(newNumberField.getText()));
            returnToMenu(); // Go back to menu after updating contact
        });

        panel.add(updateLabel);
        panel.add(updateField);
        panel.add(newNameLabel);
        panel.add(newNameField);
        panel.add(newNumberLabel);
        panel.add(newNumberField);
        panel.add(updateButton);

        return panel;
    }

    private static JPanel createSortPanel(Color bgColor, Color fgColor, Font font) {
        JPanel panel = new JPanel();
        panel.setBackground(bgColor);

        JButton sortByNameButton = new JButton("Sort by Name");
        JButton sortByNumberButton = new JButton("Sort by Number");

        sortByNameButton.addActionListener(e -> {
            sortByName();
            returnToMenu(); // Go back to menu after sorting
        });
        sortByNumberButton.addActionListener(e -> {
            sortByNumber();
            returnToMenu(); // Go back to menu after sorting
        });

        panel.add(sortByNameButton);
        panel.add(sortByNumberButton);

        return panel;
    }

    // Method to return to main menu after performing an action
    private static void returnToMenu() {
        cardLayout.show(mainPanel, "Menu");
    }

    // Core functionalities
    private static void insertContact() {
        String name = nameField.getText();
        int number = Integer.parseInt(numberField.getText());

        names.add(name);
        numbers.add(number);

        JOptionPane.showMessageDialog(null, "Contact added successfully.");
    }

    private static void searchContact(int searchNo) {
        boolean found = false;
        for (int i = 0; i < numbers.size(); i++) {
            if (numbers.get(i) == searchNo) {
                JOptionPane.showMessageDialog(null, "Contact found: " + names.get(i) + " " + numbers.get(i));
                found = true;
                break;
            }
        }

        if (!found) {
            JOptionPane.showMessageDialog(null, "Contact not found.");
        }
    }

    private static void displayAllContacts() {
        StringBuilder displayText = new StringBuilder();
        if (names.isEmpty()) {
            displayText.append("No contacts to display.");
        } else {
            for (int i = 0; i < names.size(); i++) {
                displayText.append(i + 1).append(". ").append(names.get(i)).append(" ").append(numbers.get(i)).append("\n");
            }
        }
        displayArea.setText(displayText.toString());
    }

    private static void deleteContact(String input) {
        boolean deleted = false;
        for (int i = 0; i < names.size(); i++) {
            if (names.get(i).equalsIgnoreCase(input) || numbers.get(i).toString().equals(input)) {
                names.remove(i);
                numbers.remove(i);
                JOptionPane.showMessageDialog(null, "Contact deleted successfully.");
                deleted = true;
                break;
            }
        }

        if (!deleted) {
            JOptionPane.showMessageDialog(null, "Contact not found.");
        }
    }

    private static void updateContact(String input, String newName, int newNumber) {
        boolean updated = false;
        for (int i = 0; i < names.size(); i++) {
            if (names.get(i).equalsIgnoreCase(input) || numbers.get(i).toString().equals(input)) {
                names.set(i, newName);
                numbers.set(i, newNumber);
                JOptionPane.showMessageDialog(null, "Contact updated successfully.");
                updated = true;
                break;
            }
        }

        if (!updated) {
            JOptionPane.showMessageDialog(null, "Contact not found.");
        }
    }

    private static void sortByName() {
        List<Map.Entry<String, Integer>> entries = new ArrayList<>();
        for (int i = 0; i < names.size(); i++) {
            entries.add(new AbstractMap.SimpleEntry<>(names.get(i), numbers.get(i)));
        }

        entries.sort(Map.Entry.comparingByKey());

        names.clear();
        numbers.clear();
        for (Map.Entry<String, Integer> entry : entries) {
            names.add(entry.getKey());
            numbers.add(entry.getValue());
        }

        JOptionPane.showMessageDialog(null, "Contacts sorted by name.");
        displayAllContacts();
    }

    private static void sortByNumber() {
        List<Map.Entry<Integer, String>> entries = new ArrayList<>();
        for (int i = 0; i < numbers.size(); i++) {
            entries.add(new AbstractMap.SimpleEntry<>(numbers.get(i), names.get(i)));
        }

        entries.sort(Map.Entry.comparingByKey());

        names.clear();
        numbers.clear();
        for (Map.Entry<Integer, String> entry : entries) {
            numbers.add(entry.getKey());
            names.add(entry.getValue());
        }

        JOptionPane.showMessageDialog(null, "Contacts sorted by number.");
        displayAllContacts();
    }
}import javax.swing.*;
import java.awt.*;
import java.util.*;
import java.util.List;

public class Main {
    private static final List<String> names = new ArrayList<>();
    private static final List<Integer> numbers = new ArrayList<>();

    private static final CardLayout cardLayout = new CardLayout();
    private static final JPanel mainPanel = new JPanel(cardLayout);

    private static final JTextField nameField = new JTextField(15);
    private static final JTextField numberField = new JTextField(15);
    private static final JTextArea displayArea = new JTextArea(10, 30);

    public static void main(String[] args) {
        // Create JFrame
        JFrame frame = new JFrame("Phonebook Application");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(400, 400);
        frame.setLayout(new BorderLayout());

        // Dark background and custom fonts/colors
        Color darkColor = new Color(45, 45, 45);
        Color lightColor = new Color(255, 255, 255);
        Font font = new Font("Arial", Font.PLAIN, 14);

        // Create Menu Panel
        JPanel menuPanel = new JPanel(new GridLayout(7, 1, 10, 10));
        menuPanel.setBackground(darkColor);

        JButton insertButton = createMenuButton("Insert Contact", darkColor, lightColor, font);
        JButton searchButton = createMenuButton("Search Contact", darkColor, lightColor, font);
        JButton displayButton = createMenuButton("Display All Contacts", darkColor, lightColor, font);
        JButton deleteButton = createMenuButton("Delete Contact", darkColor, lightColor, font);
        JButton updateButton = createMenuButton("Update Contact", darkColor, lightColor, font);
        JButton sortButton = createMenuButton("Sort Contacts", darkColor, lightColor, font);
        JButton exitButton = createMenuButton("Exit", darkColor, lightColor, font);

        // Add buttons to menu panel
        menuPanel.add(insertButton);
        menuPanel.add(searchButton);
        menuPanel.add(displayButton);
        menuPanel.add(deleteButton);
        menuPanel.add(updateButton);
        menuPanel.add(sortButton);
        menuPanel.add(exitButton);

        // Create Contact Panels
        JPanel insertPanel = createInsertPanel(darkColor, lightColor, font);
        JPanel searchPanel = createSearchPanel(darkColor, lightColor, font);
        JPanel displayPanel = createDisplayPanel(darkColor, lightColor, font);
        JPanel deletePanel = createDeletePanel(darkColor, lightColor, font);
        JPanel updatePanel = createUpdatePanel(darkColor, lightColor, font);
        JPanel sortPanel = createSortPanel(darkColor, lightColor, font);

        // Add panels to main panel with CardLayout
        mainPanel.add(menuPanel, "Menu");
        mainPanel.add(insertPanel, "Insert");
        mainPanel.add(searchPanel, "Search");
        mainPanel.add(displayPanel, "Display");
        mainPanel.add(deletePanel, "Delete");
        mainPanel.add(updatePanel, "Update");
        mainPanel.add(sortPanel, "Sort");

        // Action Listeners for menu buttons
        insertButton.addActionListener(e -> cardLayout.show(mainPanel, "Insert"));
        searchButton.addActionListener(e -> cardLayout.show(mainPanel, "Search"));
        displayButton.addActionListener(e -> {
            displayAllContacts();
            cardLayout.show(mainPanel, "Display");
        });
        deleteButton.addActionListener(e -> cardLayout.show(mainPanel, "Delete"));
        updateButton.addActionListener(e -> cardLayout.show(mainPanel, "Update"));
        sortButton.addActionListener(e -> cardLayout.show(mainPanel, "Sort"));
        exitButton.addActionListener(e -> System.exit(0));  // Exit action

        // Add components to frame
        frame.add(mainPanel, BorderLayout.CENTER);
        cardLayout.show(mainPanel, "Menu");
        frame.setVisible(true);
    }

    // Helper method to create menu buttons with consistent styling
    private static JButton createMenuButton(String text, Color bgColor, Color fgColor, Font font) {
        JButton button = new JButton(text);
        button.setBackground(bgColor);
        button.setForeground(fgColor);
        button.setFont(font);
        button.setFocusPainted(false);
        return button;
    }

    private static JPanel createInsertPanel(Color bgColor, Color fgColor, Font font) {
        JPanel panel = new JPanel();
        panel.setBackground(bgColor);
        panel.setLayout(new GridLayout(4, 1));

        JLabel nameLabel = new JLabel("Enter Name: ");
        nameLabel.setForeground(fgColor);
        nameLabel.setFont(font);

        JLabel numberLabel = new JLabel("Enter Number: ");
        numberLabel.setForeground(fgColor);
        numberLabel.setFont(font);

        JButton addButton = new JButton("Add Contact");
        addButton.setBackground(Color.RED);
        addButton.setForeground(fgColor);
        addButton.addActionListener(e -> {
            insertContact();
            returnToMenu(); // Go back to menu after inserting contact
        });

        panel.add(nameLabel);
        panel.add(nameField);
        panel.add(numberLabel);
        panel.add(numberField);
        panel.add(addButton);

        return panel;
    }

    private static JPanel createSearchPanel(Color bgColor, Color fgColor, Font font) {
        JPanel panel = new JPanel();
        panel.setBackground(bgColor);
        panel.setLayout(new GridLayout(3, 1));

        JLabel searchLabel = new JLabel("Enter Number to Search: ");
        searchLabel.setForeground(fgColor);
        searchLabel.setFont(font);

        JTextField searchField = new JTextField(15);
        JButton searchButton = new JButton("Search");

        searchButton.addActionListener(e -> {
            searchContact(Integer.parseInt(searchField.getText()));
            returnToMenu(); // Go back to menu after search
        });

        panel.add(searchLabel);
        panel.add(searchField);
        panel.add(searchButton);

        return panel;
    }

    private static JPanel createDisplayPanel(Color bgColor, Color fgColor, Font font) {
        JPanel panel = new JPanel();
        panel.setBackground(bgColor);

        displayArea.setEditable(false);
        displayArea.setForeground(fgColor);
        displayArea.setBackground(Color.RED);
        displayArea.setFont(font);

        JButton returnbutton = new JButton("return to menu");

        returnbutton.addActionListener(e -> {
            returnToMenu(); // Go back to menu after deleting contact
        });

        panel.add(new JScrollPane(displayArea));
        panel.add(returnbutton);
        return panel;

    }

    private static JPanel createDeletePanel(Color bgColor, Color fgColor, Font font) {
        JPanel panel = new JPanel();
        panel.setBackground(bgColor);
        panel.setLayout(new GridLayout(3, 1));

        JLabel deleteLabel = new JLabel("Enter Name or Number to Delete: ");
        deleteLabel.setForeground(fgColor);
        deleteLabel.setFont(font);

        JTextField deleteField = new JTextField(15);
        JButton deleteButton = new JButton("Delete");

        deleteButton.addActionListener(e -> {
            deleteContact(deleteField.getText());
            returnToMenu(); // Go back to menu after deleting contact
        });

        panel.add(deleteLabel);
        panel.add(deleteField);
        panel.add(deleteButton);

        return panel;
    }

    private static JPanel createUpdatePanel(Color bgColor, Color fgColor, Font font) {
        JPanel panel = new JPanel();
        panel.setBackground(bgColor);
        panel.setLayout(new GridLayout(5, 1));

        JLabel updateLabel = new JLabel("Enter Name or Number to Update: ");
        updateLabel.setForeground(fgColor);
        updateLabel.setFont(font);

        JTextField updateField = new JTextField(15);

        JLabel newNameLabel = new JLabel("Enter New Name: ");
        newNameLabel.setForeground(fgColor);
        newNameLabel.setFont(font);

        JTextField newNameField = new JTextField(15);

        JLabel newNumberLabel = new JLabel("Enter New Number: ");
        newNumberLabel.setForeground(fgColor);
        newNumberLabel.setFont(font);

        JTextField newNumberField = new JTextField(15);

        JButton updateButton = new JButton("Update");

        updateButton.addActionListener(e -> {
            updateContact(updateField.getText(), newNameField.getText(), Integer.parseInt(newNumberField.getText()));
            returnToMenu(); // Go back to menu after updating contact
        });

        panel.add(updateLabel);
        panel.add(updateField);
        panel.add(newNameLabel);
        panel.add(newNameField);
        panel.add(newNumberLabel);
        panel.add(newNumberField);
        panel.add(updateButton);

        return panel;
    }

    private static JPanel createSortPanel(Color bgColor, Color fgColor, Font font) {
        JPanel panel = new JPanel();
        panel.setBackground(bgColor);

        JButton sortByNameButton = new JButton("Sort by Name");
        JButton sortByNumberButton = new JButton("Sort by Number");

        sortByNameButton.addActionListener(e -> {
            sortByName();
            returnToMenu(); // Go back to menu after sorting
        });
        sortByNumberButton.addActionListener(e -> {
            sortByNumber();
            returnToMenu(); // Go back to menu after sorting
        });

        panel.add(sortByNameButton);
        panel.add(sortByNumberButton);

        return panel;
    }

    // Method to return to main menu after performing an action
    private static void returnToMenu() {
        cardLayout.show(mainPanel, "Menu");
    }

    // Core functionalities
    private static void insertContact() {
        String name = nameField.getText();
        int number = Integer.parseInt(numberField.getText());

        names.add(name);
        numbers.add(number);

        JOptionPane.showMessageDialog(null, "Contact added successfully.");
    }

    private static void searchContact(int searchNo) {
        boolean found = false;
        for (int i = 0; i < numbers.size(); i++) {
            if (numbers.get(i) == searchNo) {
                JOptionPane.showMessageDialog(null, "Contact found: " + names.get(i) + " " + numbers.get(i));
                found = true;
                break;
            }
        }

        if (!found) {
            JOptionPane.showMessageDialog(null, "Contact not found.");
        }
    }

    private static void displayAllContacts() {
        StringBuilder displayText = new StringBuilder();
        if (names.isEmpty()) {
            displayText.append("No contacts to display.");
        } else {
            for (int i = 0; i < names.size(); i++) {
                displayText.append(i + 1).append(". ").append(names.get(i)).append(" ").append(numbers.get(i)).append("\n");
            }
        }
        displayArea.setText(displayText.toString());
    }

    private static void deleteContact(String input) {
        boolean deleted = false;
        for (int i = 0; i < names.size(); i++) {
            if (names.get(i).equalsIgnoreCase(input) || numbers.get(i).toString().equals(input)) {
                names.remove(i);
                numbers.remove(i);
                JOptionPane.showMessageDialog(null, "Contact deleted successfully.");
                deleted = true;
                break;
            }
        }

        if (!deleted) {
            JOptionPane.showMessageDialog(null, "Contact not found.");
        }
    }

    private static void updateContact(String input, String newName, int newNumber) {
        boolean updated = false;
        for (int i = 0; i < names.size(); i++) {
            if (names.get(i).equalsIgnoreCase(input) || numbers.get(i).toString().equals(input)) {
                names.set(i, newName);
                numbers.set(i, newNumber);
                JOptionPane.showMessageDialog(null, "Contact updated successfully.");
                updated = true;
                break;
            }
        }

        if (!updated) {
            JOptionPane.showMessageDialog(null, "Contact not found.");
        }
    }

    private static void sortByName() {
        List<Map.Entry<String, Integer>> entries = new ArrayList<>();
        for (int i = 0; i < names.size(); i++) {
            entries.add(new AbstractMap.SimpleEntry<>(names.get(i), numbers.get(i)));
        }

        entries.sort(Map.Entry.comparingByKey());

        names.clear();
        numbers.clear();
        for (Map.Entry<String, Integer> entry : entries) {
            names.add(entry.getKey());
            numbers.add(entry.getValue());
        }

        JOptionPane.showMessageDialog(null, "Contacts sorted by name.");
        displayAllContacts();
    }

    private static void sortByNumber() {
        List<Map.Entry<Integer, String>> entries = new ArrayList<>();
        for (int i = 0; i < numbers.size(); i++) {
            entries.add(new AbstractMap.SimpleEntry<>(numbers.get(i), names.get(i)));
        }

        entries.sort(Map.Entry.comparingByKey());

        names.clear();
        numbers.clear();
        for (Map.Entry<Integer, String> entry : entries) {
            numbers.add(entry.getKey());
            names.add(entry.getValue());
        }

        JOptionPane.showMessageDialog(null, "Contacts sorted by number.");
        displayAllContacts();
    }
}
